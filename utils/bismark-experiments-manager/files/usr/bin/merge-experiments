#!/usr/bin/lua

-- BUILT-IN/EXTERNAL MODULES
require('io')
require('os')
require('uci')
require('bmlua.opkg')
opkg = bmlua.opkg
require('bmlua.path')
path = bmlua.path
require('nixio.fs')

------------------------------------------------------------------------------
-- GLOBALS
------------------------------------------------------------------------------
UCI_DIR = '/etc/config'
UCI_CONFIG = 'bismark-experiments'
EXPERIMENTS_CACHE = '/var/bismark-experiments'
DEBUG = false

------------------------------------------------------------------------------
-- CONSTANTS
------------------------------------------------------------------------------
UCI_TRUE = '1'
UCI_FALSE = '0'

------------------------------------------------------------------------------
-- PUBLIC FUNCTIONS
------------------------------------------------------------------------------
function main(arg)
    nixio.fs.mkdir(EXPERIMENTS_CACHE)
    local downloaded = path.join(EXPERIMENTS_CACHE, "Experiments")
    local updated_experiments = false
    for info in opkg.get_package_list_urls():iter() do
        nixio.fs.remove(downloaded)
        local experiments_url = path.join(info.url, "Experiments")
        local filename = path.join(EXPERIMENTS_CACHE, info.name)
        local return_code = os.execute("curl -f -z " .. filename
                                       .. " -o " .. downloaded
                                       .. " " .. experiments_url)
        if return_code == 0 and nixio.fs.stat(downloaded) ~= nil then
            if nixio.fs.rename(downloaded, filename) then
                merge_experiments(filename)
                updated_experiments = true
            end
        end
    end
    if updated_experiments then
        os.execute("setup-and-teardown-experiments")
    end
end

function merge_experiments(remote_fullpath)
    pdebug("DEBUG MODE ON\n")

    local remote_dirpath = path.dirname(remote_fullpath)
    local remote_filename = path.basename(remote_fullpath)
    if not nixio.fs.stat(remote_fullpath) then
        print(string.format("Remote experiment UCI file %q not found",
                remote_fullpath))
        return false
    end

    if DEBUG ~= nil and DEBUG == true then
        UCI_DIR = 'etc_config'
    end
    local local_fullpath = path.abspath(path.join(UCI_DIR, UCI_CONFIG))
    if not nixio.fs.stat(local_fullpath) then
        pdebug("UCI file %q does not exist; 'touch'ing.\n", local_fullpath)
        os.execute(string.format('touch %s', local_fullpath))
    end

    local remote_uci = uci.cursor(remote_dirpath)
    local local_uci
    if DEBUG then
        local_uci = uci.cursor(path.dirname(local_fullpath))
    else
        local_uci = uci.cursor()
    end

    update_local_experiment_list(UCI_CONFIG, remote_filename, local_uci, remote_uci)
    local_uci:save(UCI_CONFIG)
    local_uci:commit(UCI_CONFIG)
end

function update_local_experiment_list(local_config, remote_config, local_uci, remote_uci)
    local loc_exps = local_uci:get_all(local_config)
    local rem_exps = remote_uci:get_all(remote_config)

    if loc_exps == nil or rem_exps == nil then return nil end

    -- Insert and update experiments found in remote config file
    for ename, exp in pairs(rem_exps) do
        if exp.description ~= nil
                and exp.display_name ~= nil
                and exp.package ~= nil then
            if loc_exps[ename] == nil then
                local_uci:set(local_config, ename, 'experiment')
                local_uci:set(local_config, ename, 'installed', UCI_FALSE)
                pdebug("Experiment %q added to local experiment set.\n", ename)
            else
                pdebug("Updating local experiment %q.\n", ename)
            end
            local_uci:set(local_config, ename, 'description', exp.description)
            local_uci:set(local_config, ename, 'display_name', exp.display_name)
            local_uci:set(local_config, ename, 'package', exp.package)
            local_uci:set(local_config, ename, 'available', UCI_TRUE)
        end
    end

    -- Remove experiments not found in remote config file
    local exps_to_delete = {}
    for ename,exp in pairs(loc_exps) do
        if rem_exps[ename] == nil then
            local_uci:set(local_config, ename, 'available', UCI_FALSE)
            if not uci_bool(local_uci:get(local_config, ename, 'installed')) then
                exps_to_delete[#exps_to_delete + 1] = ename
            end
        end
    end
    for i,ename in pairs(exps_to_delete) do
        local_uci:delete(local_config, ename)
        pdebug("Experiment %q deleted from local experiment set.\n", ename)
    end
end

function uci_bool(s)
    -- interpret the many ways true or false can be expressed in UCI.
    local retval = nil
    s = s:lower()
    if s == 'true' or s == '1' or s == 'yes' then
        retval = true
    elseif s == 'false' or s == '0' or s == 'no' then
        retval = false
    end
    return retval
end

function pdebug(s, ...)
    if DEBUG ~= nil and DEBUG == true then
        io.stderr:write(string.format(s, unpack(arg)))
    end
end

------------------------------------------------------------------------------
-- TESTING STUFF
------------------------------------------------------------------------------
function init_be_remote_uci(uci_cursor, filename)
    -- initialize remote bismark-experiments config file with reasonable values
    local success = true
    local config_name = filename
    local sec_name = 'wifi_beacons'
    success = success and uci_cursor:set(config_name, sec_name, 'experiment')
    success = success and uci_cursor:set(config_name, sec_name,
            'display_name', 'Wifi Beacons')
    success = success and uci_cursor:set(config_name, sec_name, 'description',
            'Wifi Beacons collects data about the devices connected to your ' ..
            'BISmark router over wireless, as well as the presence of other ' ..
            'nearby wireless access points. <b>Wifi Beacons does not ' ..
            'collect the contents of your network traffic.</b>')
    success = success and uci_cursor:set(config_name, sec_name, 'package',
            {'wifi_beacons-tmpfs',
             'bismark-data-uploader'})
    if success then
        uci_cursor:commit(config_name)
    else
        print("failure")
    end
end

function init_be_local_uci(uci_cursor)
    -- initialize local bismark-experiments config file with reasonable values
    local success = true
    local config_name = 'bismark-experiments'
    local sec_name = 'wifi_beacons'
    init_be_remote_uci(uci_cursor, config_name)
    success = success and uci_cursor:set(config_name, sec_name,
            'installed', UCI_TRUE)
    success = success and uci_cursor:set(config_name, sec_name,
            'available', UCI_TRUE)
    if success then
        uci_cursor:commit(config_name)
    else
        print("failure")
    end
end

------------------------------------------------------------------------------
-- EXECUTE THIS SCRIPT
------------------------------------------------------------------------------
return main(arg)
